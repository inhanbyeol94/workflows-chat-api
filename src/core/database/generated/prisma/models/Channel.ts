
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Channel` model and its related types.
 *
 * üü¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Channel
 * Ï±ÑÎÑê
 */
export type ChannelModel = runtime.Types.Result.DefaultSelection<Prisma.$ChannelPayload>

export type AggregateChannel = {
  _count: ChannelCountAggregateOutputType | null
  _avg: ChannelAvgAggregateOutputType | null
  _sum: ChannelSumAggregateOutputType | null
  _min: ChannelMinAggregateOutputType | null
  _max: ChannelMaxAggregateOutputType | null
}

export type ChannelAvgAggregateOutputType = {
  id: number | null
  creatorId: number | null
}

export type ChannelSumAggregateOutputType = {
  id: number | null
  creatorId: number | null
}

export type ChannelMinAggregateOutputType = {
  id: number | null
  name: string | null
  description: string | null
  isSecret: boolean | null
  createdAt: Date | null
  updatedAt: Date | null
  deletedAt: Date | null
  creatorId: number | null
}

export type ChannelMaxAggregateOutputType = {
  id: number | null
  name: string | null
  description: string | null
  isSecret: boolean | null
  createdAt: Date | null
  updatedAt: Date | null
  deletedAt: Date | null
  creatorId: number | null
}

export type ChannelCountAggregateOutputType = {
  id: number
  name: number
  description: number
  isSecret: number
  createdAt: number
  updatedAt: number
  deletedAt: number
  creatorId: number
  _all: number
}


export type ChannelAvgAggregateInputType = {
  id?: true
  creatorId?: true
}

export type ChannelSumAggregateInputType = {
  id?: true
  creatorId?: true
}

export type ChannelMinAggregateInputType = {
  id?: true
  name?: true
  description?: true
  isSecret?: true
  createdAt?: true
  updatedAt?: true
  deletedAt?: true
  creatorId?: true
}

export type ChannelMaxAggregateInputType = {
  id?: true
  name?: true
  description?: true
  isSecret?: true
  createdAt?: true
  updatedAt?: true
  deletedAt?: true
  creatorId?: true
}

export type ChannelCountAggregateInputType = {
  id?: true
  name?: true
  description?: true
  isSecret?: true
  createdAt?: true
  updatedAt?: true
  deletedAt?: true
  creatorId?: true
  _all?: true
}

export type ChannelAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Channel to aggregate.
   */
  where?: Prisma.ChannelWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Channels to fetch.
   */
  orderBy?: Prisma.ChannelOrderByWithRelationInput | Prisma.ChannelOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ChannelWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `¬±n` Channels from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Channels.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Channels
  **/
  _count?: true | ChannelCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ChannelAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ChannelSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ChannelMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ChannelMaxAggregateInputType
}

export type GetChannelAggregateType<T extends ChannelAggregateArgs> = {
      [P in keyof T & keyof AggregateChannel]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateChannel[P]>
    : Prisma.GetScalarType<T[P], AggregateChannel[P]>
}




export type ChannelGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ChannelWhereInput
  orderBy?: Prisma.ChannelOrderByWithAggregationInput | Prisma.ChannelOrderByWithAggregationInput[]
  by: Prisma.ChannelScalarFieldEnum[] | Prisma.ChannelScalarFieldEnum
  having?: Prisma.ChannelScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ChannelCountAggregateInputType | true
  _avg?: ChannelAvgAggregateInputType
  _sum?: ChannelSumAggregateInputType
  _min?: ChannelMinAggregateInputType
  _max?: ChannelMaxAggregateInputType
}

export type ChannelGroupByOutputType = {
  id: number
  name: string
  description: string | null
  isSecret: boolean
  createdAt: Date
  updatedAt: Date | null
  deletedAt: Date | null
  creatorId: number | null
  _count: ChannelCountAggregateOutputType | null
  _avg: ChannelAvgAggregateOutputType | null
  _sum: ChannelSumAggregateOutputType | null
  _min: ChannelMinAggregateOutputType | null
  _max: ChannelMaxAggregateOutputType | null
}

type GetChannelGroupByPayload<T extends ChannelGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ChannelGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ChannelGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ChannelGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ChannelGroupByOutputType[P]>
      }
    >
  > 



export type ChannelWhereInput = {
  AND?: Prisma.ChannelWhereInput | Prisma.ChannelWhereInput[]
  OR?: Prisma.ChannelWhereInput[]
  NOT?: Prisma.ChannelWhereInput | Prisma.ChannelWhereInput[]
  id?: Prisma.IntFilter<"Channel"> | number
  name?: Prisma.StringFilter<"Channel"> | string
  description?: Prisma.StringNullableFilter<"Channel"> | string | null
  isSecret?: Prisma.BoolFilter<"Channel"> | boolean
  createdAt?: Prisma.DateTimeFilter<"Channel"> | Date | string
  updatedAt?: Prisma.DateTimeNullableFilter<"Channel"> | Date | string | null
  deletedAt?: Prisma.DateTimeNullableFilter<"Channel"> | Date | string | null
  creatorId?: Prisma.IntNullableFilter<"Channel"> | number | null
  creator?: Prisma.XOR<Prisma.UserNullableScalarRelationFilter, Prisma.UserWhereInput> | null
  users?: Prisma.ChannelUsersListRelationFilter
  messages?: Prisma.MessageListRelationFilter
}

export type ChannelOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  isSecret?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  deletedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  creatorId?: Prisma.SortOrderInput | Prisma.SortOrder
  creator?: Prisma.UserOrderByWithRelationInput
  users?: Prisma.ChannelUsersOrderByRelationAggregateInput
  messages?: Prisma.MessageOrderByRelationAggregateInput
}

export type ChannelWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  name?: string
  AND?: Prisma.ChannelWhereInput | Prisma.ChannelWhereInput[]
  OR?: Prisma.ChannelWhereInput[]
  NOT?: Prisma.ChannelWhereInput | Prisma.ChannelWhereInput[]
  description?: Prisma.StringNullableFilter<"Channel"> | string | null
  isSecret?: Prisma.BoolFilter<"Channel"> | boolean
  createdAt?: Prisma.DateTimeFilter<"Channel"> | Date | string
  updatedAt?: Prisma.DateTimeNullableFilter<"Channel"> | Date | string | null
  deletedAt?: Prisma.DateTimeNullableFilter<"Channel"> | Date | string | null
  creatorId?: Prisma.IntNullableFilter<"Channel"> | number | null
  creator?: Prisma.XOR<Prisma.UserNullableScalarRelationFilter, Prisma.UserWhereInput> | null
  users?: Prisma.ChannelUsersListRelationFilter
  messages?: Prisma.MessageListRelationFilter
}, "id" | "name">

export type ChannelOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  isSecret?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  deletedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  creatorId?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.ChannelCountOrderByAggregateInput
  _avg?: Prisma.ChannelAvgOrderByAggregateInput
  _max?: Prisma.ChannelMaxOrderByAggregateInput
  _min?: Prisma.ChannelMinOrderByAggregateInput
  _sum?: Prisma.ChannelSumOrderByAggregateInput
}

export type ChannelScalarWhereWithAggregatesInput = {
  AND?: Prisma.ChannelScalarWhereWithAggregatesInput | Prisma.ChannelScalarWhereWithAggregatesInput[]
  OR?: Prisma.ChannelScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ChannelScalarWhereWithAggregatesInput | Prisma.ChannelScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Channel"> | number
  name?: Prisma.StringWithAggregatesFilter<"Channel"> | string
  description?: Prisma.StringNullableWithAggregatesFilter<"Channel"> | string | null
  isSecret?: Prisma.BoolWithAggregatesFilter<"Channel"> | boolean
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Channel"> | Date | string
  updatedAt?: Prisma.DateTimeNullableWithAggregatesFilter<"Channel"> | Date | string | null
  deletedAt?: Prisma.DateTimeNullableWithAggregatesFilter<"Channel"> | Date | string | null
  creatorId?: Prisma.IntNullableWithAggregatesFilter<"Channel"> | number | null
}

export type ChannelCreateInput = {
  name: string
  description?: string | null
  isSecret?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string | null
  deletedAt?: Date | string | null
  creator?: Prisma.UserCreateNestedOneWithoutCreatedChannelsInput
  users?: Prisma.ChannelUsersCreateNestedManyWithoutChannelInput
  messages?: Prisma.MessageCreateNestedManyWithoutChannelInput
}

export type ChannelUncheckedCreateInput = {
  id?: number
  name: string
  description?: string | null
  isSecret?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string | null
  deletedAt?: Date | string | null
  creatorId?: number | null
  users?: Prisma.ChannelUsersUncheckedCreateNestedManyWithoutChannelInput
  messages?: Prisma.MessageUncheckedCreateNestedManyWithoutChannelInput
}

export type ChannelUpdateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isSecret?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  creator?: Prisma.UserUpdateOneWithoutCreatedChannelsNestedInput
  users?: Prisma.ChannelUsersUpdateManyWithoutChannelNestedInput
  messages?: Prisma.MessageUpdateManyWithoutChannelNestedInput
}

export type ChannelUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isSecret?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  creatorId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  users?: Prisma.ChannelUsersUncheckedUpdateManyWithoutChannelNestedInput
  messages?: Prisma.MessageUncheckedUpdateManyWithoutChannelNestedInput
}

export type ChannelCreateManyInput = {
  id?: number
  name: string
  description?: string | null
  isSecret?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string | null
  deletedAt?: Date | string | null
  creatorId?: number | null
}

export type ChannelUpdateManyMutationInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isSecret?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type ChannelUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isSecret?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  creatorId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type ChannelCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  isSecret?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  deletedAt?: Prisma.SortOrder
  creatorId?: Prisma.SortOrder
}

export type ChannelAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  creatorId?: Prisma.SortOrder
}

export type ChannelMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  isSecret?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  deletedAt?: Prisma.SortOrder
  creatorId?: Prisma.SortOrder
}

export type ChannelMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  isSecret?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  deletedAt?: Prisma.SortOrder
  creatorId?: Prisma.SortOrder
}

export type ChannelSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  creatorId?: Prisma.SortOrder
}

export type ChannelScalarRelationFilter = {
  is?: Prisma.ChannelWhereInput
  isNot?: Prisma.ChannelWhereInput
}

export type ChannelListRelationFilter = {
  every?: Prisma.ChannelWhereInput
  some?: Prisma.ChannelWhereInput
  none?: Prisma.ChannelWhereInput
}

export type ChannelOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type NullableStringFieldUpdateOperationsInput = {
  set?: string | null
}

export type BoolFieldUpdateOperationsInput = {
  set?: boolean
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}

export type NullableDateTimeFieldUpdateOperationsInput = {
  set?: Date | string | null
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type NullableIntFieldUpdateOperationsInput = {
  set?: number | null
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type ChannelCreateNestedOneWithoutUsersInput = {
  create?: Prisma.XOR<Prisma.ChannelCreateWithoutUsersInput, Prisma.ChannelUncheckedCreateWithoutUsersInput>
  connectOrCreate?: Prisma.ChannelCreateOrConnectWithoutUsersInput
  connect?: Prisma.ChannelWhereUniqueInput
}

export type ChannelUpdateOneRequiredWithoutUsersNestedInput = {
  create?: Prisma.XOR<Prisma.ChannelCreateWithoutUsersInput, Prisma.ChannelUncheckedCreateWithoutUsersInput>
  connectOrCreate?: Prisma.ChannelCreateOrConnectWithoutUsersInput
  upsert?: Prisma.ChannelUpsertWithoutUsersInput
  connect?: Prisma.ChannelWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ChannelUpdateToOneWithWhereWithoutUsersInput, Prisma.ChannelUpdateWithoutUsersInput>, Prisma.ChannelUncheckedUpdateWithoutUsersInput>
}

export type ChannelCreateNestedOneWithoutMessagesInput = {
  create?: Prisma.XOR<Prisma.ChannelCreateWithoutMessagesInput, Prisma.ChannelUncheckedCreateWithoutMessagesInput>
  connectOrCreate?: Prisma.ChannelCreateOrConnectWithoutMessagesInput
  connect?: Prisma.ChannelWhereUniqueInput
}

export type ChannelUpdateOneRequiredWithoutMessagesNestedInput = {
  create?: Prisma.XOR<Prisma.ChannelCreateWithoutMessagesInput, Prisma.ChannelUncheckedCreateWithoutMessagesInput>
  connectOrCreate?: Prisma.ChannelCreateOrConnectWithoutMessagesInput
  upsert?: Prisma.ChannelUpsertWithoutMessagesInput
  connect?: Prisma.ChannelWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ChannelUpdateToOneWithWhereWithoutMessagesInput, Prisma.ChannelUpdateWithoutMessagesInput>, Prisma.ChannelUncheckedUpdateWithoutMessagesInput>
}

export type ChannelCreateNestedManyWithoutCreatorInput = {
  create?: Prisma.XOR<Prisma.ChannelCreateWithoutCreatorInput, Prisma.ChannelUncheckedCreateWithoutCreatorInput> | Prisma.ChannelCreateWithoutCreatorInput[] | Prisma.ChannelUncheckedCreateWithoutCreatorInput[]
  connectOrCreate?: Prisma.ChannelCreateOrConnectWithoutCreatorInput | Prisma.ChannelCreateOrConnectWithoutCreatorInput[]
  createMany?: Prisma.ChannelCreateManyCreatorInputEnvelope
  connect?: Prisma.ChannelWhereUniqueInput | Prisma.ChannelWhereUniqueInput[]
}

export type ChannelUncheckedCreateNestedManyWithoutCreatorInput = {
  create?: Prisma.XOR<Prisma.ChannelCreateWithoutCreatorInput, Prisma.ChannelUncheckedCreateWithoutCreatorInput> | Prisma.ChannelCreateWithoutCreatorInput[] | Prisma.ChannelUncheckedCreateWithoutCreatorInput[]
  connectOrCreate?: Prisma.ChannelCreateOrConnectWithoutCreatorInput | Prisma.ChannelCreateOrConnectWithoutCreatorInput[]
  createMany?: Prisma.ChannelCreateManyCreatorInputEnvelope
  connect?: Prisma.ChannelWhereUniqueInput | Prisma.ChannelWhereUniqueInput[]
}

export type ChannelUpdateManyWithoutCreatorNestedInput = {
  create?: Prisma.XOR<Prisma.ChannelCreateWithoutCreatorInput, Prisma.ChannelUncheckedCreateWithoutCreatorInput> | Prisma.ChannelCreateWithoutCreatorInput[] | Prisma.ChannelUncheckedCreateWithoutCreatorInput[]
  connectOrCreate?: Prisma.ChannelCreateOrConnectWithoutCreatorInput | Prisma.ChannelCreateOrConnectWithoutCreatorInput[]
  upsert?: Prisma.ChannelUpsertWithWhereUniqueWithoutCreatorInput | Prisma.ChannelUpsertWithWhereUniqueWithoutCreatorInput[]
  createMany?: Prisma.ChannelCreateManyCreatorInputEnvelope
  set?: Prisma.ChannelWhereUniqueInput | Prisma.ChannelWhereUniqueInput[]
  disconnect?: Prisma.ChannelWhereUniqueInput | Prisma.ChannelWhereUniqueInput[]
  delete?: Prisma.ChannelWhereUniqueInput | Prisma.ChannelWhereUniqueInput[]
  connect?: Prisma.ChannelWhereUniqueInput | Prisma.ChannelWhereUniqueInput[]
  update?: Prisma.ChannelUpdateWithWhereUniqueWithoutCreatorInput | Prisma.ChannelUpdateWithWhereUniqueWithoutCreatorInput[]
  updateMany?: Prisma.ChannelUpdateManyWithWhereWithoutCreatorInput | Prisma.ChannelUpdateManyWithWhereWithoutCreatorInput[]
  deleteMany?: Prisma.ChannelScalarWhereInput | Prisma.ChannelScalarWhereInput[]
}

export type ChannelUncheckedUpdateManyWithoutCreatorNestedInput = {
  create?: Prisma.XOR<Prisma.ChannelCreateWithoutCreatorInput, Prisma.ChannelUncheckedCreateWithoutCreatorInput> | Prisma.ChannelCreateWithoutCreatorInput[] | Prisma.ChannelUncheckedCreateWithoutCreatorInput[]
  connectOrCreate?: Prisma.ChannelCreateOrConnectWithoutCreatorInput | Prisma.ChannelCreateOrConnectWithoutCreatorInput[]
  upsert?: Prisma.ChannelUpsertWithWhereUniqueWithoutCreatorInput | Prisma.ChannelUpsertWithWhereUniqueWithoutCreatorInput[]
  createMany?: Prisma.ChannelCreateManyCreatorInputEnvelope
  set?: Prisma.ChannelWhereUniqueInput | Prisma.ChannelWhereUniqueInput[]
  disconnect?: Prisma.ChannelWhereUniqueInput | Prisma.ChannelWhereUniqueInput[]
  delete?: Prisma.ChannelWhereUniqueInput | Prisma.ChannelWhereUniqueInput[]
  connect?: Prisma.ChannelWhereUniqueInput | Prisma.ChannelWhereUniqueInput[]
  update?: Prisma.ChannelUpdateWithWhereUniqueWithoutCreatorInput | Prisma.ChannelUpdateWithWhereUniqueWithoutCreatorInput[]
  updateMany?: Prisma.ChannelUpdateManyWithWhereWithoutCreatorInput | Prisma.ChannelUpdateManyWithWhereWithoutCreatorInput[]
  deleteMany?: Prisma.ChannelScalarWhereInput | Prisma.ChannelScalarWhereInput[]
}

export type ChannelCreateWithoutUsersInput = {
  name: string
  description?: string | null
  isSecret?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string | null
  deletedAt?: Date | string | null
  creator?: Prisma.UserCreateNestedOneWithoutCreatedChannelsInput
  messages?: Prisma.MessageCreateNestedManyWithoutChannelInput
}

export type ChannelUncheckedCreateWithoutUsersInput = {
  id?: number
  name: string
  description?: string | null
  isSecret?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string | null
  deletedAt?: Date | string | null
  creatorId?: number | null
  messages?: Prisma.MessageUncheckedCreateNestedManyWithoutChannelInput
}

export type ChannelCreateOrConnectWithoutUsersInput = {
  where: Prisma.ChannelWhereUniqueInput
  create: Prisma.XOR<Prisma.ChannelCreateWithoutUsersInput, Prisma.ChannelUncheckedCreateWithoutUsersInput>
}

export type ChannelUpsertWithoutUsersInput = {
  update: Prisma.XOR<Prisma.ChannelUpdateWithoutUsersInput, Prisma.ChannelUncheckedUpdateWithoutUsersInput>
  create: Prisma.XOR<Prisma.ChannelCreateWithoutUsersInput, Prisma.ChannelUncheckedCreateWithoutUsersInput>
  where?: Prisma.ChannelWhereInput
}

export type ChannelUpdateToOneWithWhereWithoutUsersInput = {
  where?: Prisma.ChannelWhereInput
  data: Prisma.XOR<Prisma.ChannelUpdateWithoutUsersInput, Prisma.ChannelUncheckedUpdateWithoutUsersInput>
}

export type ChannelUpdateWithoutUsersInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isSecret?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  creator?: Prisma.UserUpdateOneWithoutCreatedChannelsNestedInput
  messages?: Prisma.MessageUpdateManyWithoutChannelNestedInput
}

export type ChannelUncheckedUpdateWithoutUsersInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isSecret?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  creatorId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  messages?: Prisma.MessageUncheckedUpdateManyWithoutChannelNestedInput
}

export type ChannelCreateWithoutMessagesInput = {
  name: string
  description?: string | null
  isSecret?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string | null
  deletedAt?: Date | string | null
  creator?: Prisma.UserCreateNestedOneWithoutCreatedChannelsInput
  users?: Prisma.ChannelUsersCreateNestedManyWithoutChannelInput
}

export type ChannelUncheckedCreateWithoutMessagesInput = {
  id?: number
  name: string
  description?: string | null
  isSecret?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string | null
  deletedAt?: Date | string | null
  creatorId?: number | null
  users?: Prisma.ChannelUsersUncheckedCreateNestedManyWithoutChannelInput
}

export type ChannelCreateOrConnectWithoutMessagesInput = {
  where: Prisma.ChannelWhereUniqueInput
  create: Prisma.XOR<Prisma.ChannelCreateWithoutMessagesInput, Prisma.ChannelUncheckedCreateWithoutMessagesInput>
}

export type ChannelUpsertWithoutMessagesInput = {
  update: Prisma.XOR<Prisma.ChannelUpdateWithoutMessagesInput, Prisma.ChannelUncheckedUpdateWithoutMessagesInput>
  create: Prisma.XOR<Prisma.ChannelCreateWithoutMessagesInput, Prisma.ChannelUncheckedCreateWithoutMessagesInput>
  where?: Prisma.ChannelWhereInput
}

export type ChannelUpdateToOneWithWhereWithoutMessagesInput = {
  where?: Prisma.ChannelWhereInput
  data: Prisma.XOR<Prisma.ChannelUpdateWithoutMessagesInput, Prisma.ChannelUncheckedUpdateWithoutMessagesInput>
}

export type ChannelUpdateWithoutMessagesInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isSecret?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  creator?: Prisma.UserUpdateOneWithoutCreatedChannelsNestedInput
  users?: Prisma.ChannelUsersUpdateManyWithoutChannelNestedInput
}

export type ChannelUncheckedUpdateWithoutMessagesInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isSecret?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  creatorId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  users?: Prisma.ChannelUsersUncheckedUpdateManyWithoutChannelNestedInput
}

export type ChannelCreateWithoutCreatorInput = {
  name: string
  description?: string | null
  isSecret?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string | null
  deletedAt?: Date | string | null
  users?: Prisma.ChannelUsersCreateNestedManyWithoutChannelInput
  messages?: Prisma.MessageCreateNestedManyWithoutChannelInput
}

export type ChannelUncheckedCreateWithoutCreatorInput = {
  id?: number
  name: string
  description?: string | null
  isSecret?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string | null
  deletedAt?: Date | string | null
  users?: Prisma.ChannelUsersUncheckedCreateNestedManyWithoutChannelInput
  messages?: Prisma.MessageUncheckedCreateNestedManyWithoutChannelInput
}

export type ChannelCreateOrConnectWithoutCreatorInput = {
  where: Prisma.ChannelWhereUniqueInput
  create: Prisma.XOR<Prisma.ChannelCreateWithoutCreatorInput, Prisma.ChannelUncheckedCreateWithoutCreatorInput>
}

export type ChannelCreateManyCreatorInputEnvelope = {
  data: Prisma.ChannelCreateManyCreatorInput | Prisma.ChannelCreateManyCreatorInput[]
  skipDuplicates?: boolean
}

export type ChannelUpsertWithWhereUniqueWithoutCreatorInput = {
  where: Prisma.ChannelWhereUniqueInput
  update: Prisma.XOR<Prisma.ChannelUpdateWithoutCreatorInput, Prisma.ChannelUncheckedUpdateWithoutCreatorInput>
  create: Prisma.XOR<Prisma.ChannelCreateWithoutCreatorInput, Prisma.ChannelUncheckedCreateWithoutCreatorInput>
}

export type ChannelUpdateWithWhereUniqueWithoutCreatorInput = {
  where: Prisma.ChannelWhereUniqueInput
  data: Prisma.XOR<Prisma.ChannelUpdateWithoutCreatorInput, Prisma.ChannelUncheckedUpdateWithoutCreatorInput>
}

export type ChannelUpdateManyWithWhereWithoutCreatorInput = {
  where: Prisma.ChannelScalarWhereInput
  data: Prisma.XOR<Prisma.ChannelUpdateManyMutationInput, Prisma.ChannelUncheckedUpdateManyWithoutCreatorInput>
}

export type ChannelScalarWhereInput = {
  AND?: Prisma.ChannelScalarWhereInput | Prisma.ChannelScalarWhereInput[]
  OR?: Prisma.ChannelScalarWhereInput[]
  NOT?: Prisma.ChannelScalarWhereInput | Prisma.ChannelScalarWhereInput[]
  id?: Prisma.IntFilter<"Channel"> | number
  name?: Prisma.StringFilter<"Channel"> | string
  description?: Prisma.StringNullableFilter<"Channel"> | string | null
  isSecret?: Prisma.BoolFilter<"Channel"> | boolean
  createdAt?: Prisma.DateTimeFilter<"Channel"> | Date | string
  updatedAt?: Prisma.DateTimeNullableFilter<"Channel"> | Date | string | null
  deletedAt?: Prisma.DateTimeNullableFilter<"Channel"> | Date | string | null
  creatorId?: Prisma.IntNullableFilter<"Channel"> | number | null
}

export type ChannelCreateManyCreatorInput = {
  id?: number
  name: string
  description?: string | null
  isSecret?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string | null
  deletedAt?: Date | string | null
}

export type ChannelUpdateWithoutCreatorInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isSecret?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  users?: Prisma.ChannelUsersUpdateManyWithoutChannelNestedInput
  messages?: Prisma.MessageUpdateManyWithoutChannelNestedInput
}

export type ChannelUncheckedUpdateWithoutCreatorInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isSecret?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  users?: Prisma.ChannelUsersUncheckedUpdateManyWithoutChannelNestedInput
  messages?: Prisma.MessageUncheckedUpdateManyWithoutChannelNestedInput
}

export type ChannelUncheckedUpdateManyWithoutCreatorInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isSecret?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}


/**
 * Count Type ChannelCountOutputType
 */

export type ChannelCountOutputType = {
  users: number
  messages: number
}

export type ChannelCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  users?: boolean | ChannelCountOutputTypeCountUsersArgs
  messages?: boolean | ChannelCountOutputTypeCountMessagesArgs
}

/**
 * ChannelCountOutputType without action
 */
export type ChannelCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChannelCountOutputType
   */
  select?: Prisma.ChannelCountOutputTypeSelect<ExtArgs> | null
}

/**
 * ChannelCountOutputType without action
 */
export type ChannelCountOutputTypeCountUsersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ChannelUsersWhereInput
}

/**
 * ChannelCountOutputType without action
 */
export type ChannelCountOutputTypeCountMessagesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MessageWhereInput
}


export type ChannelSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  isSecret?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  deletedAt?: boolean
  creatorId?: boolean
  creator?: boolean | Prisma.Channel$creatorArgs<ExtArgs>
  users?: boolean | Prisma.Channel$usersArgs<ExtArgs>
  messages?: boolean | Prisma.Channel$messagesArgs<ExtArgs>
  _count?: boolean | Prisma.ChannelCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["channel"]>

export type ChannelSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  isSecret?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  deletedAt?: boolean
  creatorId?: boolean
  creator?: boolean | Prisma.Channel$creatorArgs<ExtArgs>
}, ExtArgs["result"]["channel"]>

export type ChannelSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  isSecret?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  deletedAt?: boolean
  creatorId?: boolean
  creator?: boolean | Prisma.Channel$creatorArgs<ExtArgs>
}, ExtArgs["result"]["channel"]>

export type ChannelSelectScalar = {
  id?: boolean
  name?: boolean
  description?: boolean
  isSecret?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  deletedAt?: boolean
  creatorId?: boolean
}

export type ChannelOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "description" | "isSecret" | "createdAt" | "updatedAt" | "deletedAt" | "creatorId", ExtArgs["result"]["channel"]>
export type ChannelInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  creator?: boolean | Prisma.Channel$creatorArgs<ExtArgs>
  users?: boolean | Prisma.Channel$usersArgs<ExtArgs>
  messages?: boolean | Prisma.Channel$messagesArgs<ExtArgs>
  _count?: boolean | Prisma.ChannelCountOutputTypeDefaultArgs<ExtArgs>
}
export type ChannelIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  creator?: boolean | Prisma.Channel$creatorArgs<ExtArgs>
}
export type ChannelIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  creator?: boolean | Prisma.Channel$creatorArgs<ExtArgs>
}

export type $ChannelPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Channel"
  objects: {
    /**
     * ÏÉùÏÑ±Ïûê
     */
    creator: Prisma.$UserPayload<ExtArgs> | null
    /**
     * Ï±ÑÎÑêÏóê ÏÜçÌïú ÏÇ¨Ïö©Ïûê
     */
    users: Prisma.$ChannelUsersPayload<ExtArgs>[]
    /**
     * Ï±ÑÎÑêÏóêÏÑú Î∞úÏÉùÌïú Î©îÏÑ∏ÏßÄ
     */
    messages: Prisma.$MessagePayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    /**
     * ÏïÑÏù¥Îîî
     */
    id: number
    /**
     * Ï±ÑÎÑêÎ™Ö
     */
    name: string
    /**
     * Ï±ÑÎÑê ÏÑ§Î™Ö
     */
    description: string | null
    /**
     * ÎπÑÎ∞ÄÏ±ÑÎÑê Ïó¨Î∂Ä (ÎπÑÎ∞ÄÏ±ÑÎÑêÏù¥ ÏïÑÎãå Í≤ΩÏö∞ ÏÇ¨Ïö©Ïûê Îì±Î°ù Ïãú Í∏∞Î≥∏Ï†ÅÏúºÎ°ú Í≥µÍ∞ú Ï±ÑÎÑêÏóê Ï°∞Ïù∏)
     */
    isSecret: boolean
    /**
     * ÏÉùÏÑ±Ïùº
     */
    createdAt: Date
    /**
     * ÏàòÏ†ïÏùº
     */
    updatedAt: Date | null
    /**
     * ÏÇ≠Ï†úÏùº (nullÏù∏ Í≤ΩÏö∞ ÏÇ≠Ï†úÎêòÏßÄ ÏïäÏùå)
     */
    deletedAt: Date | null
    /**
     * ÏÉùÏÑ±Ïûê ÏïÑÏù¥Îîî
     */
    creatorId: number | null
  }, ExtArgs["result"]["channel"]>
  composites: {}
}

export type ChannelGetPayload<S extends boolean | null | undefined | ChannelDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ChannelPayload, S>

export type ChannelCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ChannelFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ChannelCountAggregateInputType | true
  }

export interface ChannelDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Channel'], meta: { name: 'Channel' } }
  /**
   * Find zero or one Channel that matches the filter.
   * @param {ChannelFindUniqueArgs} args - Arguments to find a Channel
   * @example
   * // Get one Channel
   * const channel = await prisma.channel.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ChannelFindUniqueArgs>(args: Prisma.SelectSubset<T, ChannelFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ChannelClient<runtime.Types.Result.GetResult<Prisma.$ChannelPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Channel that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ChannelFindUniqueOrThrowArgs} args - Arguments to find a Channel
   * @example
   * // Get one Channel
   * const channel = await prisma.channel.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ChannelFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ChannelFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ChannelClient<runtime.Types.Result.GetResult<Prisma.$ChannelPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Channel that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChannelFindFirstArgs} args - Arguments to find a Channel
   * @example
   * // Get one Channel
   * const channel = await prisma.channel.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ChannelFindFirstArgs>(args?: Prisma.SelectSubset<T, ChannelFindFirstArgs<ExtArgs>>): Prisma.Prisma__ChannelClient<runtime.Types.Result.GetResult<Prisma.$ChannelPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Channel that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChannelFindFirstOrThrowArgs} args - Arguments to find a Channel
   * @example
   * // Get one Channel
   * const channel = await prisma.channel.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ChannelFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ChannelFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ChannelClient<runtime.Types.Result.GetResult<Prisma.$ChannelPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Channels that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChannelFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Channels
   * const channels = await prisma.channel.findMany()
   * 
   * // Get first 10 Channels
   * const channels = await prisma.channel.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const channelWithIdOnly = await prisma.channel.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ChannelFindManyArgs>(args?: Prisma.SelectSubset<T, ChannelFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ChannelPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Channel.
   * @param {ChannelCreateArgs} args - Arguments to create a Channel.
   * @example
   * // Create one Channel
   * const Channel = await prisma.channel.create({
   *   data: {
   *     // ... data to create a Channel
   *   }
   * })
   * 
   */
  create<T extends ChannelCreateArgs>(args: Prisma.SelectSubset<T, ChannelCreateArgs<ExtArgs>>): Prisma.Prisma__ChannelClient<runtime.Types.Result.GetResult<Prisma.$ChannelPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Channels.
   * @param {ChannelCreateManyArgs} args - Arguments to create many Channels.
   * @example
   * // Create many Channels
   * const channel = await prisma.channel.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ChannelCreateManyArgs>(args?: Prisma.SelectSubset<T, ChannelCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Channels and returns the data saved in the database.
   * @param {ChannelCreateManyAndReturnArgs} args - Arguments to create many Channels.
   * @example
   * // Create many Channels
   * const channel = await prisma.channel.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Channels and only return the `id`
   * const channelWithIdOnly = await prisma.channel.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ChannelCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ChannelCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ChannelPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Channel.
   * @param {ChannelDeleteArgs} args - Arguments to delete one Channel.
   * @example
   * // Delete one Channel
   * const Channel = await prisma.channel.delete({
   *   where: {
   *     // ... filter to delete one Channel
   *   }
   * })
   * 
   */
  delete<T extends ChannelDeleteArgs>(args: Prisma.SelectSubset<T, ChannelDeleteArgs<ExtArgs>>): Prisma.Prisma__ChannelClient<runtime.Types.Result.GetResult<Prisma.$ChannelPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Channel.
   * @param {ChannelUpdateArgs} args - Arguments to update one Channel.
   * @example
   * // Update one Channel
   * const channel = await prisma.channel.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ChannelUpdateArgs>(args: Prisma.SelectSubset<T, ChannelUpdateArgs<ExtArgs>>): Prisma.Prisma__ChannelClient<runtime.Types.Result.GetResult<Prisma.$ChannelPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Channels.
   * @param {ChannelDeleteManyArgs} args - Arguments to filter Channels to delete.
   * @example
   * // Delete a few Channels
   * const { count } = await prisma.channel.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ChannelDeleteManyArgs>(args?: Prisma.SelectSubset<T, ChannelDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Channels.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChannelUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Channels
   * const channel = await prisma.channel.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ChannelUpdateManyArgs>(args: Prisma.SelectSubset<T, ChannelUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Channels and returns the data updated in the database.
   * @param {ChannelUpdateManyAndReturnArgs} args - Arguments to update many Channels.
   * @example
   * // Update many Channels
   * const channel = await prisma.channel.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Channels and only return the `id`
   * const channelWithIdOnly = await prisma.channel.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ChannelUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ChannelUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ChannelPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Channel.
   * @param {ChannelUpsertArgs} args - Arguments to update or create a Channel.
   * @example
   * // Update or create a Channel
   * const channel = await prisma.channel.upsert({
   *   create: {
   *     // ... data to create a Channel
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Channel we want to update
   *   }
   * })
   */
  upsert<T extends ChannelUpsertArgs>(args: Prisma.SelectSubset<T, ChannelUpsertArgs<ExtArgs>>): Prisma.Prisma__ChannelClient<runtime.Types.Result.GetResult<Prisma.$ChannelPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Channels.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChannelCountArgs} args - Arguments to filter Channels to count.
   * @example
   * // Count the number of Channels
   * const count = await prisma.channel.count({
   *   where: {
   *     // ... the filter for the Channels we want to count
   *   }
   * })
  **/
  count<T extends ChannelCountArgs>(
    args?: Prisma.Subset<T, ChannelCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ChannelCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Channel.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChannelAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ChannelAggregateArgs>(args: Prisma.Subset<T, ChannelAggregateArgs>): Prisma.PrismaPromise<GetChannelAggregateType<T>>

  /**
   * Group by Channel.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChannelGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ChannelGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ChannelGroupByArgs['orderBy'] }
      : { orderBy?: ChannelGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ChannelGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChannelGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Channel model
 */
readonly fields: ChannelFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Channel.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ChannelClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  creator<T extends Prisma.Channel$creatorArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Channel$creatorArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  users<T extends Prisma.Channel$usersArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Channel$usersArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ChannelUsersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  messages<T extends Prisma.Channel$messagesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Channel$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Channel model
 */
export interface ChannelFieldRefs {
  readonly id: Prisma.FieldRef<"Channel", 'Int'>
  readonly name: Prisma.FieldRef<"Channel", 'String'>
  readonly description: Prisma.FieldRef<"Channel", 'String'>
  readonly isSecret: Prisma.FieldRef<"Channel", 'Boolean'>
  readonly createdAt: Prisma.FieldRef<"Channel", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Channel", 'DateTime'>
  readonly deletedAt: Prisma.FieldRef<"Channel", 'DateTime'>
  readonly creatorId: Prisma.FieldRef<"Channel", 'Int'>
}
    

// Custom InputTypes
/**
 * Channel findUnique
 */
export type ChannelFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Channel
   */
  select?: Prisma.ChannelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Channel
   */
  omit?: Prisma.ChannelOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChannelInclude<ExtArgs> | null
  /**
   * Filter, which Channel to fetch.
   */
  where: Prisma.ChannelWhereUniqueInput
}

/**
 * Channel findUniqueOrThrow
 */
export type ChannelFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Channel
   */
  select?: Prisma.ChannelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Channel
   */
  omit?: Prisma.ChannelOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChannelInclude<ExtArgs> | null
  /**
   * Filter, which Channel to fetch.
   */
  where: Prisma.ChannelWhereUniqueInput
}

/**
 * Channel findFirst
 */
export type ChannelFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Channel
   */
  select?: Prisma.ChannelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Channel
   */
  omit?: Prisma.ChannelOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChannelInclude<ExtArgs> | null
  /**
   * Filter, which Channel to fetch.
   */
  where?: Prisma.ChannelWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Channels to fetch.
   */
  orderBy?: Prisma.ChannelOrderByWithRelationInput | Prisma.ChannelOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Channels.
   */
  cursor?: Prisma.ChannelWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `¬±n` Channels from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Channels.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Channels.
   */
  distinct?: Prisma.ChannelScalarFieldEnum | Prisma.ChannelScalarFieldEnum[]
}

/**
 * Channel findFirstOrThrow
 */
export type ChannelFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Channel
   */
  select?: Prisma.ChannelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Channel
   */
  omit?: Prisma.ChannelOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChannelInclude<ExtArgs> | null
  /**
   * Filter, which Channel to fetch.
   */
  where?: Prisma.ChannelWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Channels to fetch.
   */
  orderBy?: Prisma.ChannelOrderByWithRelationInput | Prisma.ChannelOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Channels.
   */
  cursor?: Prisma.ChannelWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `¬±n` Channels from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Channels.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Channels.
   */
  distinct?: Prisma.ChannelScalarFieldEnum | Prisma.ChannelScalarFieldEnum[]
}

/**
 * Channel findMany
 */
export type ChannelFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Channel
   */
  select?: Prisma.ChannelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Channel
   */
  omit?: Prisma.ChannelOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChannelInclude<ExtArgs> | null
  /**
   * Filter, which Channels to fetch.
   */
  where?: Prisma.ChannelWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Channels to fetch.
   */
  orderBy?: Prisma.ChannelOrderByWithRelationInput | Prisma.ChannelOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Channels.
   */
  cursor?: Prisma.ChannelWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `¬±n` Channels from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Channels.
   */
  skip?: number
  distinct?: Prisma.ChannelScalarFieldEnum | Prisma.ChannelScalarFieldEnum[]
}

/**
 * Channel create
 */
export type ChannelCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Channel
   */
  select?: Prisma.ChannelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Channel
   */
  omit?: Prisma.ChannelOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChannelInclude<ExtArgs> | null
  /**
   * The data needed to create a Channel.
   */
  data: Prisma.XOR<Prisma.ChannelCreateInput, Prisma.ChannelUncheckedCreateInput>
}

/**
 * Channel createMany
 */
export type ChannelCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Channels.
   */
  data: Prisma.ChannelCreateManyInput | Prisma.ChannelCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Channel createManyAndReturn
 */
export type ChannelCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Channel
   */
  select?: Prisma.ChannelSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Channel
   */
  omit?: Prisma.ChannelOmit<ExtArgs> | null
  /**
   * The data used to create many Channels.
   */
  data: Prisma.ChannelCreateManyInput | Prisma.ChannelCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChannelIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Channel update
 */
export type ChannelUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Channel
   */
  select?: Prisma.ChannelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Channel
   */
  omit?: Prisma.ChannelOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChannelInclude<ExtArgs> | null
  /**
   * The data needed to update a Channel.
   */
  data: Prisma.XOR<Prisma.ChannelUpdateInput, Prisma.ChannelUncheckedUpdateInput>
  /**
   * Choose, which Channel to update.
   */
  where: Prisma.ChannelWhereUniqueInput
}

/**
 * Channel updateMany
 */
export type ChannelUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Channels.
   */
  data: Prisma.XOR<Prisma.ChannelUpdateManyMutationInput, Prisma.ChannelUncheckedUpdateManyInput>
  /**
   * Filter which Channels to update
   */
  where?: Prisma.ChannelWhereInput
  /**
   * Limit how many Channels to update.
   */
  limit?: number
}

/**
 * Channel updateManyAndReturn
 */
export type ChannelUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Channel
   */
  select?: Prisma.ChannelSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Channel
   */
  omit?: Prisma.ChannelOmit<ExtArgs> | null
  /**
   * The data used to update Channels.
   */
  data: Prisma.XOR<Prisma.ChannelUpdateManyMutationInput, Prisma.ChannelUncheckedUpdateManyInput>
  /**
   * Filter which Channels to update
   */
  where?: Prisma.ChannelWhereInput
  /**
   * Limit how many Channels to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChannelIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Channel upsert
 */
export type ChannelUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Channel
   */
  select?: Prisma.ChannelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Channel
   */
  omit?: Prisma.ChannelOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChannelInclude<ExtArgs> | null
  /**
   * The filter to search for the Channel to update in case it exists.
   */
  where: Prisma.ChannelWhereUniqueInput
  /**
   * In case the Channel found by the `where` argument doesn't exist, create a new Channel with this data.
   */
  create: Prisma.XOR<Prisma.ChannelCreateInput, Prisma.ChannelUncheckedCreateInput>
  /**
   * In case the Channel was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ChannelUpdateInput, Prisma.ChannelUncheckedUpdateInput>
}

/**
 * Channel delete
 */
export type ChannelDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Channel
   */
  select?: Prisma.ChannelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Channel
   */
  omit?: Prisma.ChannelOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChannelInclude<ExtArgs> | null
  /**
   * Filter which Channel to delete.
   */
  where: Prisma.ChannelWhereUniqueInput
}

/**
 * Channel deleteMany
 */
export type ChannelDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Channels to delete
   */
  where?: Prisma.ChannelWhereInput
  /**
   * Limit how many Channels to delete.
   */
  limit?: number
}

/**
 * Channel.creator
 */
export type Channel$creatorArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null
  where?: Prisma.UserWhereInput
}

/**
 * Channel.users
 */
export type Channel$usersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChannelUsers
   */
  select?: Prisma.ChannelUsersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChannelUsers
   */
  omit?: Prisma.ChannelUsersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChannelUsersInclude<ExtArgs> | null
  where?: Prisma.ChannelUsersWhereInput
  orderBy?: Prisma.ChannelUsersOrderByWithRelationInput | Prisma.ChannelUsersOrderByWithRelationInput[]
  cursor?: Prisma.ChannelUsersWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ChannelUsersScalarFieldEnum | Prisma.ChannelUsersScalarFieldEnum[]
}

/**
 * Channel.messages
 */
export type Channel$messagesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Message
   */
  select?: Prisma.MessageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Message
   */
  omit?: Prisma.MessageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MessageInclude<ExtArgs> | null
  where?: Prisma.MessageWhereInput
  orderBy?: Prisma.MessageOrderByWithRelationInput | Prisma.MessageOrderByWithRelationInput[]
  cursor?: Prisma.MessageWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.MessageScalarFieldEnum | Prisma.MessageScalarFieldEnum[]
}

/**
 * Channel without action
 */
export type ChannelDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Channel
   */
  select?: Prisma.ChannelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Channel
   */
  omit?: Prisma.ChannelOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChannelInclude<ExtArgs> | null
}
